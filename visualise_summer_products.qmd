

The dataset is sourced from data.world:
  >> https://data.world/jfreex/summer-products-and-sales-performance-in-e-commerce-on-wish


In this project, we are planing to analyse the summer-related products, as of July 2020. The dataset consists of a snapshot of some of the products available on the e-commerce platform Wish.com.



```{r}
library(tidyverse)
library(ggplot2)
library(dplyr)
library(GGally)
library(ggExtra)
library(stringr)
library(rmarkdown)
library(knitr)
```


```{r}
products <- readr::read_csv("data/summer_products_with_rating_and_performance_2020_08.csv", show_col_types = FALSE)
```


>> Things TODO

Do analysis on tag, then group by clothes into two groups of men and women. 


>> DATA CLEANING

urgency_text has NA values. converted to empty text (where there is no urgency banner)

```{r}
products |>
  mutate(has_urgency_banner = ifelse(is.na(has_urgency_banner), 0, has_urgency_banner)) |>
  mutate(urgency_text = ifelse(is.na(urgency_text), " ", urgency_text)) -> products
```

product_variation_size_id

The column is not tidy. It requires some adjustments and cleaning.
E.g. we can see both 'M' and 'M.' in this column.
```{r}
products |>
  distinct(product_variation_size_id) -> sizes
sizes
```




>> PLOTS


# product color ~ units sold for each color

## I expected that summer colors like pink and yellow would have the highest number of units sold. However, it is evident that black and white remained the most popular colors.
!!!!!!!!!!!! Rose Red

```{r}
your_custom_color_vector <- c(
  "black" = "#000000",
  "white" = "#FFFFFF",
  "gray" = "#808080",
  "purple" = "#800080",
  "blue" = "#0000FF",
  "red" = "#FF0000",
  "green" = "#008000",
  "pink" = "#FFC0CB",
  "yellow" = "#FFFF00",
  "orange" = "#FFA500",
  "navyblue" = "#000080",
  "multicolor" = "#A0A0A0", 
  "light green" = "#90EE90",
  "wine red" = "#722F37",
  "armygreen" = "#4B5320",
  "khaki" = "#F0E68C",
  "floral" = "#FFC0CB", 
  "rosered" = "#FF033E",
  "beige" = "#F5F5DC",
  "skyblue" = "#87CEEB"
)
```

```{r}
products |>
  mutate(product_color = tolower(product_color),
         product_color = ifelse(product_color %in% c("gray", "grey"), "gray", product_color),
         product_color = ifelse(product_color %in% c("wine red", "winered"), "wine red", product_color)) |>
  group_by(product_color) |>
  summarise(total_units_sold = sum(units_sold)) |>
  drop_na() |>
  top_n(20, total_units_sold) |>
  ggplot(aes(x = total_units_sold, y = reorder(product_color, total_units_sold), fill = product_color)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  geom_text(aes(label = total_units_sold), vjust = 0.5, color = "black", nudge_x = 100000) +  # adjust nudge_x manually
  labs(title = "Units Sold by Color", x = "Total Units Sold", y = "Color") +
  scale_x_continuous(labels = scales::comma_format()) +
  scale_fill_manual(values = your_custom_color_vector)
```
# Rating ~ Country of Origin
# Sale's performance by country of origin

## The ratings from China, being the most numerous, show a broad distribution, with a diverse range of product satisfaction. However, the fewer ratings from countries like Singapore and Venezuela indicate a more uniform rating pattern, it's crucial to note the smaller sample size for these countries.

## When it comes to product quality, items made in the United States tend to have consistently high ratings, indicating that they often meet customer expectations and have a more consistent level of quality. 



```{r}
sample_size = products |>
  group_by(origin_country) |>
  summarize(num=n())

products |>
  left_join(sample_size) |>
  drop_na(origin_country) |>
  mutate(origin_count = paste0(origin_country, "\n", "n=", num)) |>
  ggplot(aes(x = origin_count, y = rating, fill = factor(origin_country))) +
  geom_violin() +
  geom_jitter(height = 0, width = 0.2, alpha = 0.5) +      # geom_jitter(height = 0, width = 0.001)     ## previous code
  labs(title = "Distribution of Ratings by Country of Origin",
    x = "Country of Origin",
    y = "Rating") +
  scale_fill_brewer(palette = "Pastel1", name = "Country of Origin", 
                    labels = c("CN" = "China", 
                                 "SG" = "Singapore", 
                                 "US" = "United States", 
                                 "VE" = "Venezuela",
                                 "AT" = "Austria", 
                                 "GB" = "United Kingdom (Great Britain)"))
```

# Shipping Company ~ Average Shipping Price

## Notably, options like "Ekspresowa wysyłka" and "Livraison Express" which are express, almost double the price of standard delivery.

```{r}
ggplot(subset(products, !(shipping_option_name %in% c( "การส่งสินค้ามาตรฐาน", "الشحن القياسي", "ការដឹកជញ្ជូនតាមស្តង់ដារ"))),
       aes(x = shipping_option_name, y = shipping_option_price, fill = factor(shipping_is_express))) +
  stat_summary(fun = "mean", geom = "col") +
  labs(title = "Average Shipping Price by Company and Express Status",
       x = "Shipping Company",
       y = "Average Shipping Price",
       fill = "Express Shipping") +
  scale_fill_manual(labels = c("Not Express", "Express"), values = c("red", "blue")) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

```


```{r}
sample_size = products |>
  group_by(shipping_option_name) |>
  summarize(num=n())

subset(products, !(shipping_option_name %in% c( "การส่งสินค้ามาตรฐาน", "الشحن القياسي", "ការដឹកជញ្ជូនតាមស្តង់ដារ"))) |>
  left_join(sample_size) |>
  mutate(origin_count = paste0(shipping_option_name, "\n", "n=", num)) |>
  ggplot(aes(x = shipping_option_name, y = price)) +
  geom_point(aes(color = shipping_option_price)) +
  scale_color_gradient(low = "yellow", high = "blue") +
  labs(title = "Relationship between Shipping Price and Product Price",
    x = "Shipping Company",
    y = "Product Price",
    color = "Shipping price") +
  # coord_fixed() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

```



# Merchant info subtitle ~ merchant rating
## see if the subtitles are valid, the strength of the correlation between merchant ratings and the percentage of positive reviews.
## In reviews (merchant info subtitle), a review would be like "97 % avis positifs (160 notes)". We need to confirm this positive reviews based on merchant ratings. 

## This scatter plot explores the relationship between merchants' ratings on Wish.com and the percentage of positive reviews highlighted in their profile subtitles. The presence of a positive correlation, as could be seen the trend line slopes upward, suggests that higher merchant ratings tend to coincide with a higher percentage of positive reviews, which could imply that the subtitles provide a trustworthy reflection of customer satisfaction. Since the correlation is highly strong, it suggests that customers' perceptions (as shown by the merchant rating) are in line with the advertised positive review percentages.



```{r}
products |>
  filter(grepl("^\\d", merchant_info_subtitle)) |>
  select(merchant_info_subtitle, merchant_rating) |>
  mutate(percentage_value = as.numeric(str_extract(merchant_info_subtitle, "^\\d+"))) -> part_of_products

correlation <- cor(part_of_products$merchant_rating, part_of_products$percentage_value, use = "complete.obs")

part_of_products |>
  ggplot(aes(x = merchant_rating, y = percentage_value)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", color = "red") + 
  geom_text(aes(label = sprintf("correlation = %.2f", correlation)), x = 2.5, y = 100, hjust = 0, vjust = 1, color = "red") +  # Correlation
  labs(
    title = "Merchant Rating vs Percentage of Positive Reviews",
    x = "Merchant Rating",
    y = "Percentage of Positive Reviews",
    caption = "Data filtered based on merchant_info_subtitle starting with a number. Correlation coefficient shown in red."
  )
```
# Merchant rating ~ Product rating 

## Positive Correlation: As the merchant rating increases, the product rating also tends to increase. This suggests that merchants with higher ratings tend to sell products that are also rated more highly, which could indicate that higher-rated merchants provide better quality products or service, leading to better customer satisfaction overall.

## Variability: There is variability in product ratings across the same merchant rating level, especially in the middle range of merchant ratings. This could indicate that while the merchant's service and reputation affect product ratings, other factors also play a significant role in a product's rating, such as product quality, customer expectations, or the nature of the product itself. Since the correlation is not close to 1, it suggests that the merchant rating alone does not strongly predict the product rating. There is a lot of variability in the product ratings that is not explained by merchant ratings alone.

```{r}
correlation <- cor(products$rating, products$merchant_rating, use = "complete.obs")
products |>
  ggplot(aes(x = merchant_rating, y = rating)) +
  geom_point(alpha = 0.6) +  
  geom_smooth(method = "lm", color = "blue") + 
  annotate("text", x = max(products$merchant_rating), y = min(products$rating), 
           label = paste("Pearson r:", round(correlation, 2)), hjust = 2, vjust = -0.5, color='red') +
  labs(title = "Product Rating vs. Merchant Rating",
       x = "Merchant Rating",
       y = "Product Rating") 
```


>> Some failed plots

# Impact of Ad Boosts on Sales
## There is no effectiveness of ad boosts in increasing sales.


```{r}
products |>
  ggplot(aes(x = factor(uses_ad_boosts), y = units_sold)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.5) + 
  labs(
    title = "Impact of Ad Boosts on Sales",
    x = "Ad Boosts",
    y = "Units Sold"
  ) +
  theme_minimal() +
  scale_x_discrete(labels = c("0" = "Without Ad Boost", "1" = "With Ad Boost"))  

```

# price - retail_price ~ units_sold

```{r}
products |>
  mutate(difference = price - retail_price,
         difference_type = ifelse(difference < 0, "Negative", "Positive")) |>
  ggplot(aes(x = difference, fill = difference_type)) +
  geom_histogram(binwidth = 1, position = "identity", alpha = 0.6) +
  labs(
    title = "Plot of Units Sold for Positive and Negative Differences",
    x = "Difference (Price - Retail Price)",
    y = "Count of Units Sold"
  ) +
  scale_fill_manual(values = c("Negative" = "red", "Positive" = "green")) +
  theme_minimal()
```


```{r}
products |>
  ggplot(aes(x = retail_price, y = price)) +
  geom_point() +
  xlim(0, 255) +
  ylim(0, 255) +
  geom_abline(slope = 1, color = "red") +
  labs(x = "Retail Price",
       y = "Price")
```


# price ~ units_sold. badge_count has urgency banner

## No Idea what to do with this plot

```{r}
products |>
  ggplot(aes(x = price, y = units_sold, color = as.factor(has_urgency_banner))) + 
  geom_point(alpha = 0.5) + 
  scale_x_log10() +  
  scale_y_log10() + 
  labs(title = "Relationship between Price and Units Sold",
       x = "Price (log scale)",
       y = "Units Sold (log scale)",
       color = "Urgency Banner") +
  theme(legend.position = "bottom")

```
# Price ~ Units sold

```{r}
theme_set(theme_bw())
products |>
  ggplot(aes(price, units_sold)) + 
  geom_count(aes(color = as.factor(has_urgency_banner))) +
  labs(title = "Relationship between Price and Units Sold",
       x = "Price",
       y = "Units Sold",
       color = "Urgency Banner") -> g
ggMarginal(g, type = "histogram", fill="transparent")
```



```{r}
products |>
  group_by(urgency_text) |>
  summarise(total_units_sold = sum(units_sold)) |>
  filter(urgency_text != " ") |>
  mutate(fraction = total_units_sold/sum(total_units_sold)) |>
  mutate(ymax = cumsum(fraction)) |>
  mutate(ymin = c(0, head(ymax, n=-1))) |>
  mutate(labelPosition = (ymax + ymin) / 2) |>
  mutate(label = paste0(urgency_text, "\n total units sold: ", total_units_sold, "\n ", round(fraction*100, 2), "%")) |>
  ggplot(aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=urgency_text)) +
  geom_rect() +
  geom_text(x=0.5, aes(y=labelPosition, label=label, color=urgency_text), size=5) + # x here controls label position (inner / outer)
  scale_fill_brewer(palette = "Set2") +
  scale_color_brewer(palette = "Set2") +
  coord_polar(theta="y") +
  xlim(c(-1, 4)) +
  theme_void() +
  theme(legend.position = "none")
```









